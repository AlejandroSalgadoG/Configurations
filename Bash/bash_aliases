#!/bin/bash

alias clave="copy ~/.Apolo/key.txt"
alias aliases="vim ~/Github/Bash/bash_aliases"
alias bashrc="vim ~/Github/Bash/bashrc"
alias vimc="vim ~/Github/Vim/VimPlugin/Main.vim"
alias off="sudo poweroff"
alias sl="ls -lh"
alias asm="vim /usr/include/x86_64-linux-gnu/asm/unistd_32.h"
alias ps="ps -aux"

# Alias for i3
alias shoot="import -window root screenshot.jpg"

# Aliases to shorten linux commands
alias x="exit"
alias e="make exe"
alias k="killall"
alias deb="sudo dpkg -i"
alias untar="tar zxf"
alias exe="chmod u+x"
alias grep="grep --color"

alias ls="ls --color"
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Prints doge on the terminal
alias doge="~/Github/Bash/doge.sh"

alias cd="cd-git"
alias git="git-special"

# Functions

open(){
     case "$1" in
        *.pdf )
            xpdf $1 & ;;
        *.jpg | *.jpeg | *.png )
            feh $1 ;;
        * )
            echo Help:
            echo '  open file.[pdf|jpg|png]'
            return 1;;
    esac
}

git-special(){

    if echo $@ | grep -q commit ; then
        \git commit -m "$3"
        return
    else
        \git $@;
    fi

    if [ $? == 0 ] && [ $1 == "co" ] || [ $1 == "checkout" ]; then
       BRANCH=$(\git rev-parse --abbrev-ref HEAD)
       COMMIT=$(\git rev-parse --short HEAD)

       PS1=$PS1_GIT
    fi
}

cd-git(){
    if [ -z $1 ]; then
        \cd $HOME
    else
        \cd "$1"
    fi

    if [ -d .git ]; then REPO=$(pwd |  basename `pwd`); fi
    if [ -z $REPO ]; then return; fi

    if pwd | grep -q $REPO ; then

        BRANCH=$(\git rev-parse --abbrev-ref HEAD)
        COMMIT=$(\git rev-parse --short HEAD)
        WKDIR=$(sed -e s%^.*$REPO%.%g <<< $PWD)

        PS1=$PS1_GIT

    else
        PS1=$PS1_NORMAL
        unset REPO
    fi
}

search(){
    sudo apt-cache search $1
}

slurm(){
    case "$1" in
        "on" )
            vboxmanage startvm Slurmaster --type headless
            vboxmanage startvm Slurm1 --type headless
            vboxmanage startvm Slurm2 --type headless ;;
        "off" )
            vboxmanage controlvm Slurm1 savestate
            vboxmanage controlvm Slurm2 savestate
            vboxmanage controlvm Slurmaster savestate ;;
        "list" )
            vboxmanage list runningvms ;;
        * )
            echo Help:
            echo '  slurm [test] on|off|list'
            return 1 ;;
    esac
}

cs(){
    cd $1 && ls
}

usb(){
    if [ -z $1 ]; then
        echo Help:
        echo 'usb on|off'
        return 1
    fi

    if [ "$1" == "on" ]; then
        sudo mount /dev/sdb /mnt
        cd /mnt
    elif [ "$1" == "off" ]; then
        cd
        sudo umount /mnt
    else
        echo "Unknown option"
        return 1
    fi
}

copy(){
    xclip -sel clip $1
}

find2(){
    find . -iname $1
}

multi(){
    if [ -z $1 ]; then
        xrandr --auto
    fi

    case "$1" in
        "right" )
            case "$2" in
                "vga" )
                    xrandr --output DP1 --auto --$1-of eDP1 ;;
                "hdmi" )
                    xrandr --output HDMI1 --auto --$1-of eDP1 ;;
                * )
                    echo "Output not recognised" ;;
            esac ;;
        "left" )
            case "$2" in
                "vga" )
                    xrandr --output DP1 --auto --$1-of eDP1 ;;
                "hdmi" )
                    xrandr --output HDMI1 --auto --$1-of eDP1 ;;
                * )
                    echo "Output not recognised" ;;
            esac ;;
        "same" )
            case "$2" in
                "vga" )
                    xrandr --output DP1 --same-as eDP1 ;;
                "hdmi" )
                    xrandr --output HDMI1 --same-as eDP1 ;;
                * )
                    echo "Output not recognised" ;;
            esac ;;
        "special" )
            xrandr --output HDMI1 --mode 1920x1080 --left-of eDP1 --output DP1 --auto --left-of HDMI1 ;;
        * )
            echo "$1 is not a valid option, use same or direction" ;;
    esac
}

get(){
    history | grep $1
}

refresh(){
    source ~/.bash_aliases
    echo Done
}
